// Code generated by "genprotocol.exe -ver=455a4b53edb6ef3c7d372deb38edad83bc11b116600c85dcce176a3dfe24b32a -basedir=protocol_me -prefix=me -statstype=int"

package me_handlereq

import (
	"fmt"

	"github.com/kasworld/massecho/protocol_me/me_error"
	"github.com/kasworld/massecho/protocol_me/me_idcmd"
	"github.com/kasworld/massecho/protocol_me/me_obj"
	"github.com/kasworld/massecho/protocol_me/me_packet"
)

// obj base demux fn map
var DemuxReq2ObjAPIFnMap = [...]func(
	me interface{}, hd me_packet.Header, robj interface{}) (
	me_packet.Header, interface{}, error){
	me_idcmd.Invalid: Req2ObjAPI_Invalid, // Invalid not used, make empty packet error
	me_idcmd.Echo:    Req2ObjAPI_Echo,    // Echo simple echo

} // DemuxReq2ObjAPIFnMap

// Invalid not used, make empty packet error
func Req2ObjAPI_Invalid(
	me interface{}, hd me_packet.Header, robj interface{}) (
	me_packet.Header, interface{}, error) {
	req, ok := robj.(*me_obj.ReqInvalid_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqInvalid(me, hd, req)
	return rhd, rsp, err
}

// Invalid not used, make empty packet error
func objAPIFn_ReqInvalid(
	me interface{}, hd me_packet.Header, robj *me_obj.ReqInvalid_data) (
	me_packet.Header, *me_obj.RspInvalid_data, error) {
	sendHeader := me_packet.Header{
		ErrorCode: me_error.None,
	}
	sendBody := &me_obj.RspInvalid_data{}
	return sendHeader, sendBody, nil
}

// Echo simple echo
func Req2ObjAPI_Echo(
	me interface{}, hd me_packet.Header, robj interface{}) (
	me_packet.Header, interface{}, error) {
	req, ok := robj.(*me_obj.ReqEcho_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqEcho(me, hd, req)
	return rhd, rsp, err
}

// Echo simple echo
func objAPIFn_ReqEcho(
	me interface{}, hd me_packet.Header, robj *me_obj.ReqEcho_data) (
	me_packet.Header, *me_obj.RspEcho_data, error) {
	sendHeader := me_packet.Header{
		ErrorCode: me_error.None,
	}
	sendBody := &me_obj.RspEcho_data{}
	return sendHeader, sendBody, nil
}
