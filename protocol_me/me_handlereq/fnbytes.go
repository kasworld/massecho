// Code generated by "genprotocol.exe -ver=455a4b53edb6ef3c7d372deb38edad83bc11b116600c85dcce176a3dfe24b32a -basedir=protocol_me -prefix=me -statstype=int"

package me_handlereq

import (
	"github.com/kasworld/massecho/protocol_me/me_error"
	"github.com/kasworld/massecho/protocol_me/me_idcmd"
	"github.com/kasworld/massecho/protocol_me/me_obj"
	"github.com/kasworld/massecho/protocol_me/me_packet"
)

// bytes base fn map api, unmarshal in api
var DemuxReq2BytesAPIFnMap = [...]func(
	me interface{}, hd me_packet.Header, rbody []byte) (
	me_packet.Header, interface{}, error){
	me_idcmd.Invalid: bytesAPIFn_ReqInvalid, // Invalid not used, make empty packet error
	me_idcmd.Echo:    bytesAPIFn_ReqEcho,    // Echo simple echo

} // DemuxReq2BytesAPIFnMap

// Invalid not used, make empty packet error
func bytesAPIFn_ReqInvalid(
	me interface{}, hd me_packet.Header, rbody []byte) (
	me_packet.Header, interface{}, error) {
	// robj, err := me_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*me_obj.ReqInvalid_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := me_packet.Header{
		ErrorCode: me_error.None,
	}
	sendBody := &me_obj.RspInvalid_data{}
	return sendHeader, sendBody, nil
}

// Echo simple echo
func bytesAPIFn_ReqEcho(
	me interface{}, hd me_packet.Header, rbody []byte) (
	me_packet.Header, interface{}, error) {
	// robj, err := me_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*me_obj.ReqEcho_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := me_packet.Header{
		ErrorCode: me_error.None,
	}
	sendBody := &me_obj.RspEcho_data{}
	return sendHeader, sendBody, nil
}
