// Code generated by "genprotocol.exe -ver=455a4b53edb6ef3c7d372deb38edad83bc11b116600c85dcce176a3dfe24b32a -basedir=protocol_me -prefix=me -statstype=int"

package me_handlersp

import (
	"fmt"

	"github.com/kasworld/massecho/protocol_me/me_idcmd"
	"github.com/kasworld/massecho/protocol_me/me_json"
	"github.com/kasworld/massecho/protocol_me/me_obj"
	"github.com/kasworld/massecho/protocol_me/me_packet"
)

// bytes base demux fn map

var DemuxRsp2BytesFnMap = [...]func(me interface{}, hd me_packet.Header, rbody []byte) error{
	me_idcmd.Invalid: bytesRecvRspFn_Invalid, // Invalid not used, make empty packet error
	me_idcmd.Echo:    bytesRecvRspFn_Echo,    // Echo simple echo

}

// Invalid not used, make empty packet error
func bytesRecvRspFn_Invalid(me interface{}, hd me_packet.Header, rbody []byte) error {
	robj, err := me_json.UnmarshalPacket(hd, rbody)
	if err != nil {
		return fmt.Errorf("Packet type miss match %v", rbody)
	}
	recved, ok := robj.(*me_obj.RspInvalid_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", robj)
	}
	return fmt.Errorf("Not implemented %v", recved)
}

// Echo simple echo
func bytesRecvRspFn_Echo(me interface{}, hd me_packet.Header, rbody []byte) error {
	robj, err := me_json.UnmarshalPacket(hd, rbody)
	if err != nil {
		return fmt.Errorf("Packet type miss match %v", rbody)
	}
	recved, ok := robj.(*me_obj.RspEcho_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", robj)
	}
	return fmt.Errorf("Not implemented %v", recved)
}
